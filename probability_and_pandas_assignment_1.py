# -*- coding: utf-8 -*-
"""Probability and Pandas Assignment-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I_Bm1NfHjUap7SIUejLDT8XvKkrSq0DM
"""

##This block is only for access of files using google drive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

#For accessing any file from google drive, first share it for public access. Copy its id from last part of its address. Then specify the two lines below.
downloaded = drive.CreateFile({'id':"1dh3V3Hu5_rVgzZPJzYQPUmbCZA7S1QJ6"})   # replace the id with id of file you want to access
downloaded.GetContentFile('pima-diabetes.csv')        # replace the file name with your file

import pandas as pd

#loading PIMA dataset
pima_df = pd.read_csv('pima-diabetes.csv', delimiter = ',', header = 0)
pima_df

import matplotlib.pyplot as plot

#Plotting one column against another
plot.scatter(pima_df['Glucose'], pima_df['BloodPressure'])
plot.xlabel('Glucose');
plot.ylabel('BloodPressure')

"""#Assignment 1 (0.5)
1. Note that some values on Skin thickness and Insulin are zero. Replace zeros with mean skin thickness and mean Insulin values in the original pima_df table. Do not include zero entries during mean calculation

2. Scatter plot every column against BMI
"""

import statistics
ST_mean = pima_df['SkinThickness'][pima_df['SkinThickness']!=0].mean()
I_mean = pima_df['Insulin'][pima_df['Insulin']!=0].mean()
pima_df.loc[pima_df.SkinThickness == 0, 'SkinThickness'] = ST_mean
pima_df.loc[pima_df.Insulin == 0, 'Insulin'] = I_mean
#print(ST_mean)
#print(I_mean)
pima_df

plot.scatter(pima_df['Pregnancies'], pima_df['BMI'])
plot.xlabel('Pregnancies');
plot.ylabel('BMI')

plot.scatter(pima_df['Glucose'], pima_df['BMI'])
plot.xlabel('Glucose');
plot.ylabel('BMI')

plot.scatter(pima_df['BloodPressure'], pima_df['BMI'])
plot.xlabel('BloodPressure');
plot.ylabel('BMI')

plot.scatter(pima_df['SkinThickness'], pima_df['BMI'])
plot.xlabel('SkinThickness');
plot.ylabel('BMI')

plot.scatter(pima_df['Insulin'], pima_df['BMI'])
plot.xlabel('Insulin');
plot.ylabel('BMI')

plot.scatter(pima_df['DiabetesPedigreeFunction'], pima_df['BMI'])
plot.xlabel('DiabetesPedigreeFunction');
plot.ylabel('BMI')

"""#Assignment 2 (0.5)
3. What is your understanding of the output of the following code? Comment it.
4.Write atleast 3 colclusions about the relationships in data that you can derive from the plot.
"""

import seaborn as sn
corr_Mat = pima_df.corr()
fig, ax = plt.subplots(figsize=(10,10))  
sn.heatmap(corr_Mat, annot=True, ax= ax)

"""#Your answer here:"""

#Assignment_3_part_1
#Drawing_histograms
plot.hist(pima_df['Glucose'])
plot.title("Glucose")

plot.hist(pima_df['Outcome'])
plot.title("Outcome")

plot.hist(pima_df['Age'])
plot.title("Age")

plot.hist(pima_df['DiabetesPedigreeFunction'])
plot.title("Diabetes Pedigree Function")

plot.hist(pima_df['BMI'])
plot.title("BMI")

plot.hist(pima_df['Insulin'])
plot.title("Insulin")

plot.hist(pima_df['SkinThickness'])
plot.title("Skin Thickness")

plot.hist(pima_df['BloodPressure'])
plot.title("Blood Pressure")

plot.hist(pima_df['Pregnancies'])
plot.title("Pregnancies")

"""#Assignment 3 (0.5)
1. Draw histograms of each column
2. Create histogram using the BMI column in four categories as per following figure.
![alt text](https://www.vertex42.com/ExcelTemplates/Images/bmi-chart.gif)
"""

#Assignment_3_part_2
plot.hist(pima_df['BMI'][pima_df['BMI'] >= 30])
plot.title('Obese BMI')

plot.hist(pima_df['BMI'][(pima_df['BMI'] >= 25) & (pima_df['BMI'] <30)])
plot.title('Overweight BMI')

plot.hist(pima_df['BMI'][(pima_df['BMI'] >= 18.5) & (pima_df['BMI'] <25)])
plot.title('Normal BMI')

plot.hist(pima_df['BMI'][(pima_df['BMI'] <18.5)])
plot.title('Underweight BMI')

"""#Following code rolls a fair dice for 10000 times and then plots the histogram of the outcomes."""

import random 
import numpy as np

No_of_Rolls = 10000;
No_of_Dies = 1;
roll = [0]*No_of_Rolls

for i in range(0, No_of_Rolls):
    roll[i] = random.randint(1,6);

#print(die_roll)

plot.hist(roll, bins = np.append(np.unique(roll), max(np.unique(roll))+1))
print('Mean = ', np.mean(roll))
print('Standard Deviation = ',np.std(roll))

"""#Assignment 4 (0.5)

Write a code for rolling an unfair die that wil produce a histogram as shown here:
![alt text](https://i.ibb.co/B3QMWfQ/download.png)
"""

No_of_Rolls = 10000;
No_of_Dies = 1;
roll = [0]*No_of_Rolls
for i in range(0, No_of_Rolls):
    random_outcome = random.randint(1,12)
    if (random_outcome==9):
      random_outcome=11
    roll[i] = int((random_outcome+1)/2)

plot.hist(roll, bins = np.append(np.unique(roll), max(np.unique(roll))+1))
print('Mean = ', np.mean(roll))
print('Standard Deviation = ',np.std(roll))

"""#Assignment 5 (1)
Write a code to roll 10 fair dies simultaneously. Repeat this process 10000 times. For every roll note the average value of all ten dies. Plot the histogram of the 10000 readings.
What is the shape of this histogram?
"""

No_of_Rolls = 10000;
No_of_Dies = 10;
roll = [0]*No_of_Rolls
for i in range(0, No_of_Rolls):
  for j in range(No_of_Dies):
    roll[i]=roll[i]+random.randint(1,6);
  roll[i]=roll[i]/No_of_Dies;

plot.hist(roll, bins = np.append(np.unique(roll), max(np.unique(roll))+1))
print('Mean = ', np.mean(roll))
print('Standard Deviation = ',np.std(roll))
print('Averages mode = ',statistics.mode(roll))